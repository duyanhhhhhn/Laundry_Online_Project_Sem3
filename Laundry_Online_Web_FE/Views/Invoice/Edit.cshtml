@model Laundry_Online_Web_FE.Models.ModelViews.DTO.InvoiceForm
@{
    ViewBag.Title = "Edit Invoice";
    var isPaid = Model.Order_Status;
    var services = ViewBag.ServiceList as List<SelectListItem>;
    var paymentTypes = ViewBag.PaymentTypeList as List<SelectListItem>;
    var invoiceTypes = ViewBag.InvoiceTypeList as List<SelectListItem>;
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- jQuery (nếu chưa có) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Bootstrap Bundle JS (đã bao gồm Popper.js) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<h2>Edit Invoice #@Model.Id</h2>

<form method="post" action="@Url.Action("Edit", "Invoice")" id="mainForm">
    @Html.AntiForgeryToken()
    <input type="hidden" name="Id" value="@Model.Id" />
    <input type="hidden" name="Customer_Id" value="@Model.Customer_Id" />
    <input type="hidden" name="Employee_Id" value="@Model.Employee_Id" />
    <input type="hidden" name="Invoice_Date" value="@Model.Invoice_Date.ToString("yyyy-MM-dd")" />
    <input type="hidden" name="Order_Status" value="@Model.Order_Status" />
    <input type="hidden" name="Status" value="@Model.Status" />
    <input type="hidden" id="deletedItemIds" name="DeletedItemIds" value="" />

    <div class="row">
        <div class="col-md-6">
            <label>Customer:</label>
            <input type="text" value="@Model.Customer_Name" readonly class="form-control" />
        </div>
        <div class="col-md-6">
            <label>Employee:</label>
            <input type="text" value="@Model.Employee_Name" readonly class="form-control" />
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-6">
            <label>Delivery Date:</label>
            <input type="date" name="Delivery_Date" value="@Model.Delivery_Date.ToString("yyyy-MM-dd")" class="form-control" />
        </div>
        <div class="col-md-6">
            <label>Pickup Date:</label>
            <input type="date" name="Pickup_Date" value="@Model.Pickup_Date.ToString("yyyy-MM-dd")" class="form-control" />
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Payment_Type)
                @Html.DropDownListFor(model => model.Payment_Type,
                    ViewBag.PaymentTypeList as List<SelectListItem>,
                    "-- Select Payment Type --",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Payment_Type)
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Invoice_Type)
                @Html.DropDownListFor(model => model.Invoice_Type,
                    ViewBag.InvoiceTypeList as List<SelectListItem>,
                    "-- Select Invoice Type --",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Invoice_Type)
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Delivery_Status)
                @Html.DropDownListFor(model => model.Delivery_Status,
                    ViewBag.DeliveryStatusList as List<SelectListItem>,
                    "-- Select Delivery Status --",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Delivery_Status)
            </div>
        </div>
        <div class="col-md-6">
            <label>Shipping Cost:</label>
            <input type="number" name="Ship_Cost" id="shipCostInput"
                   class="form-control" value="@Model.Ship_Cost" step="0.01" />
        </div>
    </div>

    <div class="mt-3">
        <div class="col-md-6">
            <div class="form-group">
                <label for="CustomerPackage_Id">CustomerPackage</label>
                @if ((ViewBag.CustomerPackageList as List<SelectListItem>).Count == 1 &&
                     (ViewBag.CustomerPackageList as List<SelectListItem>)[0].Value == "0")
                {
                    <input type="text" class="form-control" value="NoPackage" readonly />
                    @Html.HiddenFor(model => model.CustomerPackage_Id)
                }
                else
                {
                    @Html.DropDownListFor(model => model.CustomerPackage_Id,
                        ViewBag.CustomerPackageList as List<SelectListItem>,
                        "Chọn gói",
                        new { @class = "form-control" })
                }
            </div>
        </div>
    </div>

    <div class="mt-3">
        <label>Notes:</label>
        <textarea name="Notes" id="Notes" class="form-control" maxlength="500">@Model.Notes</textarea>
        <small class="text-muted">Maximum 500 characters</small>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <h4>Invoice Items</h4>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addItemModal">
            <i class="fas fa-plus"></i> Add Item
        </button>
    </div>

    <div class="table-responsive mt-3">
        <table class="table table-bordered">
            <thead class="table-light">
                <tr>
                    <th>Item Name</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Sub Total</th>
                    <th>Barcode</th>
                    <th>Service</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="item-list">
                <!-- Fixed table rendering with proper barcode handling -->
                @for (int i = 0; i < Model.InvoiceItems.Count; i++)
                {
                    <tr data-id="@Model.InvoiceItems[i].Id" data-index="@i">
                        <td>
                            @Html.Hidden($"InvoiceItems[{i}].Id", Model.InvoiceItems[i].Id)
                            @Html.Hidden($"InvoiceItems[{i}].ItemName", Model.InvoiceItems[i].ItemName)
                            @Model.InvoiceItems[i].ItemName
                        </td>
                        <td>
                            @Html.Hidden($"InvoiceItems[{i}].Quantity", Model.InvoiceItems[i].Quantity)
                            @Model.InvoiceItems[i].Quantity
                        </td>
                        <td>
                            @Html.Hidden($"InvoiceItems[{i}].Unit_Price", Model.InvoiceItems[i].Unit_Price)
                            @Model.InvoiceItems[i].Unit_Price.ToString("0.00")
                        </td>
                        <td class="sub-total">@Model.InvoiceItems[i].Sub_Total.ToString("0.00")</td>
                        <td>
                            @Html.Hidden($"InvoiceItems[{i}].BarCode", Model.InvoiceItems[i].BarCode)
                            @if (!string.IsNullOrWhiteSpace(Model.InvoiceItems[i].BarCode))
                            {
                                var barcodes = Model.InvoiceItems[i].BarCode.Split('|');
                                foreach (var code in barcodes)
                                {
                                    <img src="@Url.Content("~/Content/Barcodes/" + code + ".png")"
                                         alt="@code"
                                         style="width:150px; height:auto; display:block; margin-bottom:5px;" />
                                }
                            }
                        </td>
                        <td>
                            @Html.Hidden($"InvoiceItems[{i}].Service_Id", Model.InvoiceItems[i].Service_Id)
                            @Html.Hidden($"InvoiceItems[{i}].Service_Name", Model.InvoiceItems[i].Service_Name)
                            @Model.InvoiceItems[i].Service_Name
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm" onclick="removeItem(@Model.InvoiceItems[i].Id, this)">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                            <button type="button" class="btn btn-primary btn-sm" onclick="editItem(@Model.InvoiceItems[i].Id, this)">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-3 p-3 bg-light rounded">
        <div>
            <p class="mb-1"><strong>Total Item Amount:</strong> <span id="item-total">@Model.InvoiceItems.Sum(i => i.Sub_Total).ToString("0.00")</span></p>
            <p class="mb-1"><strong>Shipping Cost:</strong> <span id="ship-cost">@Model.Ship_Cost.ToString("0.00")</span></p>
            <p class="mb-0 fs-5"><strong>Total Amount:</strong> <span id="total-amount">@Model.Total_Amount.ToString("0.00")</span></p>
        </div>
    </div>

    <div class="d-flex justify-content-end gap-2 mt-4">
        <a href="@Url.Action("Index", "Invoice")" class="btn btn-secondary px-4">Cancel</a>
        <button type="submit" class="btn btn-success px-4">
            <i class="fas fa-save"></i> Update Invoice
        </button>
        @if (isPaid != 2)
        {
            <button type="button" class="btn btn-warning px-4" onclick="confirmPayment(@Model.Id)">
                <i class="fas fa-check"></i> Confirm Payment
            </button>
        }
    </div>
</form>
<form id="confirmPaymentForm" method="post" action="@Url.Action("ConfirmPayment", "Invoice", new { id = Model.Id })" style="display: none;">
    @Html.AntiForgeryToken()
</form>

<!-- Modal Add Item -->
<div class="modal fade" id="addItemModal" tabindex="-1" role="dialog" aria-labelledby="addItemModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addItemModalLabel">Add New Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addItemForm" onsubmit="return false;">
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="itemName">Item Name <span class="text-danger">*</span></label>
                        <input type="text" id="itemName" name="ItemName" class="form-control" required />
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="quantity">Quantity <span class="text-danger">*</span></label>
                                <input type="number" id="quantity" name="Quantity" class="form-control" value="1" min="1" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="unitPrice">Unit Price <span class="text-danger">*</span></label>
                                <input type="number" id="unitPrice" name="UnitPrice" class="form-control" step="0.01" min="0" value="0" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-group mb-3">
                        <label for="serviceId">Service <span class="text-danger">*</span></label>
                        <select id="serviceId" name="ServiceId" class="form-control" required>
                            <option value="">-- Select Service --</option>
                            @if (services != null)
                            {
                                foreach (var service in services)
                                {
                                    <option value="@service.Value">@service.Text</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Sub Total:</label>
                        <input type="text" id="subTotalPreview" class="form-control" readonly value="0.00" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="addItem(event)">Add Item</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal Edit Item -->
<div class="modal fade" id="editItemModal" tabindex="-1" role="dialog" aria-labelledby="editItemModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editItemModalLabel">Edit Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editItemForm">
                <div class="modal-body">
                    <input type="hidden" id="editRowId" />
                    <input type="hidden" id="editRowIndex" />

                    <div class="form-group mb-3">
                        <label for="editItemName">Item Name <span class="text-danger">*</span></label>
                        <input type="text" id="editItemName" class="form-control" required />
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="editQuantity">Quantity <span class="text-danger">*</span></label>
                                <input type="number" id="editQuantity" class="form-control" min="1" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="editUnitPrice">Unit Price <span class="text-danger">*</span></label>
                                <input type="number" id="editUnitPrice" class="form-control" step="0.01" min="0" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-group mb-3">
                        <label for="editServiceId">Service <span class="text-danger">*</span></label>
                        <select id="editServiceId" class="form-control" required>
                            <option value="">-- Select Service --</option>
                            @if (services != null)
                            {
                                foreach (var service in services)
                                {
                                    <option value="@service.Value">@service.Text</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Sub Total:</label>
                        <input type="text" id="editSubTotalPreview" class="form-control" readonly />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveEditItem()">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>



@section scripts {
    <script>
        // Services data for JavaScript
        const services = @Html.Raw(Json.Encode(services ?? new List<SelectListItem>()));
        var deletedItemIds = [];
        var nextIndex = @Model.InvoiceItems.Count;
        const invoiceId = @Model.Id;

        // Initialize page
        $(document).ready(function() {
            updateTotals();

            // Auto-calculate sub total in Add modal
            $('#quantity, #unitPrice').on('input', function() {
                updateAddSubTotal();
            });

            // Auto-calculate sub total in Edit modal
            $('#editQuantity, #editUnitPrice').on('input', function() {
                updateEditSubTotal();
            });

            // Update totals when shipping cost changes
            $('#shipCostInput').on('input', function() {
                updateTotals();
            });

            // Form validation before submit
            $('#mainForm').on('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
                return true;
            });
        });

        function updateAddSubTotal() {
            const quantity = parseFloat($('#quantity').val() || 0);
            const unitPrice = parseFloat($('#unitPrice').val() || 0);
            const subTotal = (quantity * unitPrice).toFixed(2);
            $('#subTotalPreview').val(subTotal);
        }

        function updateEditSubTotal() {
            const quantity = parseFloat($('#editQuantity').val() || 0);
            const unitPrice = parseFloat($('#editUnitPrice').val() || 0);
            const subTotal = (quantity * unitPrice).toFixed(2);
            $('#editSubTotalPreview').val(subTotal);
        }

        // Debounced update totals to avoid too many API calls
        let updateTotalsTimeout;
        function updateTotals() {
            clearTimeout(updateTotalsTimeout);
            updateTotalsTimeout = setTimeout(function() {
                $.ajax({
                    url: '@Url.Action("GetInvoiceTotal", "Invoice")',
                    method: 'GET',
                    data: { invoiceId: invoiceId },
                    success: function(response) {
                        if (response.success) {
                            $('#item-total').text(response.itemTotal.toFixed(2));
                            $('#ship-cost').text(response.shippingCost.toFixed(2));
                            $('#total-amount').text(response.totalAmount.toFixed(2));
                        }
                    },
                    error: function() {
                        console.error('Failed to update totals');
                        showNotification('Failed to update totals', 'error');
                    }
                });
            }, 300); // 300ms debounce
        }

     function addItem(event) {
    try {
        if (event) event.preventDefault();

        const form = $('#addItemForm')[0];
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        const itemName = $('#itemName').val().trim();
        const quantity = parseInt($('#quantity').val());
        const unitPrice = parseFloat($('#unitPrice').val());
        const serviceId = $('#serviceId').val();

        if (!itemName || quantity <= 0 || unitPrice < 0 || !serviceId) {
            showNotification('Please fill all required fields correctly.', 'error');
            return;
        }

        // Show loading state
        const addButton = $('button[onclick="addItem(event)"]');
        const originalText = addButton.html();
        addButton.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Adding...');

        // AJAX call to add item
        $.ajax({
            url: '@Url.Action("AddInvoiceItem", "Invoice")',
            method: 'POST',
            data: {
                invoiceId: invoiceId,
                itemName: itemName,
                quantity: quantity,
                unitPrice: unitPrice,
                serviceId: serviceId,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                try {
                    if (response && response.success) {
                        // Get service name for display
                        const serviceName = getServiceNameById(serviceId);
                        const subTotal = (quantity * unitPrice).toFixed(2);

                        // Generate barcode HTML if barcode exists
                        let barcodeHtml = '';
                        if (response.barcode && response.barcode.trim() !== '') {
                            const barcodes = response.barcode.split('|');
                            barcodes.forEach(function(code) {
                                if (code.trim() !== '') {
                                    barcodeHtml += `<img src="@Url.Content("~/Content/Barcodes/")${encodeURIComponent(code.replace(/[^a-zA-Z0-9_\-]/g, '_'))}.png"
                                                        alt="${code}"
                                                        style="width:150px; height:auto; display:block; margin-bottom:5px;"
                                                        onerror="this.style.display='none';" />`;
                                }
                            });
                        }

                        // Add new row to table with proper hidden fields
                        const newRow = `
                        <tr data-id="${response.itemId}" data-index="${nextIndex}">
                            <td>
                                <input type="hidden" name="InvoiceItems[${nextIndex}].Id" value="${response.itemId}" />
                                <input type="hidden" name="InvoiceItems[${nextIndex}].ItemName" value="${itemName}" />
                                ${itemName}
                            </td>
                            <td>
                                <input type="hidden" name="InvoiceItems[${nextIndex}].Quantity" value="${quantity}" />
                                ${quantity}
                            </td>
                            <td>
                                <input type="hidden" name="InvoiceItems[${nextIndex}].Unit_Price" value="${unitPrice}" />
                                ${unitPrice.toFixed(2)}
                            </td>
                            <td class="sub-total">${subTotal}</td>
                            <td>
                                <input type="hidden" name="InvoiceItems[${nextIndex}].BarCode" value="${response.barcode || ''}" />
                                ${barcodeHtml}
                            </td>
                            <td>
                                <input type="hidden" name="InvoiceItems[${nextIndex}].Service_Id" value="${serviceId}" />
                                <input type="hidden" name="InvoiceItems[${nextIndex}].Service_Name" value="${serviceName}" />
                                ${serviceName}
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm" onclick="removeItem(${response.itemId}, this)">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                                <button type="button" class="btn btn-primary btn-sm" onclick="editItem(${response.itemId}, this)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                            </td>
                        </tr>`;

                        $('#item-list').append(newRow);
                        nextIndex++;

                        // Close modal and reset form
                        closeModal('addItemModal');
                        resetAddForm();
                        updateTotals();
                        showNotification('Item added successfully with barcode!', 'success');
                    } else {
                        const errorMessage = response && response.message ? response.message : 'Failed to add item';
                        showNotification('Error: ' + errorMessage, 'error');
                    }
                } catch (parseError) {
                    console.error('Error parsing add response:', parseError);
                    showNotification('Unexpected response format. Please try again.', 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX Error adding item:', error);
                showNotification('Failed to add item. Please try again.', 'error');
            },
            complete: function() {
                // Restore button state
                addButton.prop('disabled', false).html(originalText);
            }
        });

    } catch (error) {
        console.error('Error in addItem function:', error);
        showNotification('An error occurred while adding the item. Please try again.', 'error');
    }
}

// Helper function to get service name by ID
function getServiceNameById(serviceId) {
    if (services && services.length > 0) {
        const service = services.find(s => s.Value == serviceId);
        return service ? service.Text : 'Unknown Service';
    }
    return 'Unknown Service';
}

        function resetAddForm() {
            $('#addItemForm')[0].reset();
            $('#quantity').val(1);
            $('#unitPrice').val(0);
            $('#subTotalPreview').val('0.00');
        }

        function editItem(id, button) {
            try {
                if (!id || !button) {
                    showNotification('Invalid item data. Please refresh the page.', 'error');
                    return;
                }

                const row = $(button).closest('tr');
                if (row.length === 0) {
                    showNotification('Cannot find item row. Please refresh the page.', 'error');
                    return;
                }

                const index = row.data('index');
                if (index === undefined || index === null) {
                    showNotification('Invalid item index. Please refresh the page.', 'error');
                    return;
                }

                // Safely get values with fallbacks
                const itemNameInput = row.find(`input[name="InvoiceItems[${index}].ItemName"]`);
                const quantityInput = row.find(`input[name="InvoiceItems[${index}].Quantity"]`);
                const unitPriceInput = row.find(`input[name="InvoiceItems[${index}].Unit_Price"]`);
                const serviceIdInput = row.find(`input[name="InvoiceItems[${index}].Service_Id"]`);

                const itemName = itemNameInput.length > 0 ? itemNameInput.val() : '';
                const quantity = quantityInput.length > 0 ? quantityInput.val() : '1';
                const unitPrice = unitPriceInput.length > 0 ? unitPriceInput.val() : '0';
                const serviceId = serviceIdInput.length > 0 ? serviceIdInput.val() : '';

                if (!itemName) {
                    showNotification('Item name is missing. Cannot edit this item.', 'error');
                    return;
                }

                // Set values in edit modal
                $('#editRowId').val(id);
                $('#editRowIndex').val(index);
                $('#editItemName').val(itemName);
                $('#editQuantity').val(quantity);
                $('#editUnitPrice').val(unitPrice);
                $('#editServiceId').val(serviceId);
                updateEditSubTotal();

                // Show modal
                const modal = new bootstrap.Modal($('#editItemModal')[0]);
                modal.show();

            } catch (error) {
                console.error('Error in editItem function:', error);
                showNotification('An error occurred while editing the item. Please try again.', 'error');
            }
        }

        function saveEditItem() {
            const form = $('#editItemForm')[0];
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const rowId = $('#editRowId').val();
            const index = $('#editRowIndex').val();
            const itemName = $('#editItemName').val().trim();
            const quantity = parseInt($('#editQuantity').val());
            const unitPrice = parseFloat($('#editUnitPrice').val());
            const serviceId = $('#editServiceId').val();

            if (!itemName || quantity <= 0 || unitPrice < 0 || !serviceId) {
                showNotification('Please fill all required fields correctly.', 'error');
                return;
            }

            // Show loading state
            const saveButton = $('button[onclick="saveEditItem()"]');
            const originalText = saveButton.html();
            saveButton.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Saving...');

            // AJAX call to update item
            $.ajax({
                url: '@Url.Action("UpdateInvoiceItem", "Invoice")',
                method: 'POST',
                data: {
                    itemId: rowId,
                    itemName: itemName,
                    quantity: quantity,
                    unitPrice: unitPrice,
                    serviceId: serviceId
                },
                success: function(response) {
                    if (response.success) {
                        const row = $(`tr[data-index="${index}"]`);

                        // Update row content
                        row.html(`
                            <td>
                                <input type="hidden" name="InvoiceItems[${index}].Id" value="${rowId}" />
                                <input type="hidden" name="InvoiceItems[${index}].ItemName" value="${itemName}" />
                                ${itemName}
                            </td>
                            <td>
                                <input type="hidden" name="InvoiceItems[${index}].Quantity" value="${quantity}" />
                                ${quantity}
                            </td>
                            <td>
                                <input type="hidden" name="InvoiceItems[${index}].Unit_Price" value="${unitPrice}" />
                                ${unitPrice.toFixed(2)}
                            </td>
                            <td class="sub-total">${response.subTotal.toFixed(2)}</td>
                            <td>
                                <input type="hidden" name="InvoiceItems[${index}].Service_Id" value="${serviceId}" />
                                ${response.serviceName}
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm" onclick="removeItem(${rowId}, this)">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                                <button type="button" class="btn btn-primary btn-sm" onclick="editItem(${rowId}, this)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                            </td>
                        `);

                        // Close modal properly
                        closeModal('editItemModal');

                        updateTotals();
                        showNotification('Item updated successfully!', 'success');
                    } else {
                        showNotification('Error: ' + (response.message || 'Failed to update item'), 'error');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error updating item:', error);
                    showNotification('Failed to update item. Please try again.', 'error');
                },
                complete: function() {
                    // Restore button state
                    saveButton.prop('disabled', false).html(originalText);
                }
            });
        }

        // Improved index management to avoid conflicts
        function reindexItems() {
            $('#item-list tr').each(function(index) {
                const row = $(this);
                row.attr('data-index', index);

                // Update all hidden input names
                row.find('input[type="hidden"]').each(function() {
                    const input = $(this);
                    const name = input.attr('name');
                    if (name && name.includes('InvoiceItems[')) {
                        const newName = name.replace(/InvoiceItems\[\d+\]/, `InvoiceItems[${index}]`);
                        input.attr('name', newName);
                    }
                });
            });

            nextIndex = $('#item-list tr').length;
        }

        // Enhanced removeItem function
       function removeItem(itemId, button) {
    try {
        if (!itemId || !button) {
            showNotification('Invalid item data. Please refresh the page.', 'error');
            return;
        }

        if (!confirm("Are you sure you want to delete this item?")) {
            return;
        }

        const row = $(button).closest('tr');
        if (row.length === 0) {
            showNotification('Cannot find item row. Please refresh the page.', 'error');
            return;
        }

        const originalButtonHtml = $(button).html();

        // Show loading state
        $(button).prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i>');

        // AJAX call to delete item
        $.ajax({
            url: '@Url.Action("DeleteInvoiceItem", "Invoice")',
            method: 'POST',
            data: {
                itemId: itemId,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            },
            success: function(response) {
                try {
                    if (response && response.success) {
                        row.fadeOut(300, function() {
                            $(this).remove();
                            reindexItems();
                            updateTotals();
                        });
                        showNotification('Item deleted successfully!', 'success');
                    } else {
                        const errorMessage = response && response.message ? response.message : 'Failed to delete item';
                        showNotification('Error: ' + errorMessage, 'error');
                        $(button).prop('disabled', false).html(originalButtonHtml);
                    }
                } catch (parseError) {
                    console.error('Error parsing delete response:', parseError);
                    showNotification('Unexpected response format. Please try again.', 'error');
                    $(button).prop('disabled', false).html(originalButtonHtml);
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX Error deleting item:', {
                    status: status,
                    error: error,
                    responseText: xhr.responseText
                });

                let errorMessage = 'Failed to delete item. Please try again.';
                if (xhr.status === 404) {
                    errorMessage = 'Item not found. It may have been deleted already.';
                } else if (xhr.status === 403) {
                    errorMessage = 'You do not have permission to delete this item.';
                } else if (xhr.status === 500) {
                    errorMessage = 'Server error occurred. Please contact support.';
                }

                showNotification(errorMessage, 'error');
                $(button).prop('disabled', false).html(originalButtonHtml);
            }
        });

    } catch (error) {
        console.error('Error in removeItem function:', error);
        showNotification('An error occurred while deleting the item. Please try again.', 'error');
    }
}


        // Enhanced form validation
        function validateForm() {
                const deliveryDate = new Date($('input[name="Delivery_Date"]').val());
                const pickupDate = new Date($('input[name="Pickup_Date"]').val());
                const itemCount = $('#item-list tr').length;

                 //Check if there are items
                if (itemCount === 0) {
                    showNotification('Please add at least one item to the invoice.', 'error');
                    return false;
                }

            // Check date logic
            //if (deliveryDate && pickupDate && pickupDate <= deliveryDate) {
            //    showNotification('Pickup date must be after delivery date.', 'error');
            //    return false;
            //}

            // Check required fields
            const requiredFields = [
                { name: 'Payment_Type', label: 'Payment Type', disallowZero: true },
                { name: 'Invoice_Type', label: 'Invoice Type', disallowZero: true },
                { name: 'Delivery_Status', label: 'Delivery Status', disallowZero: false }
            ];

            for (let field of requiredFields) {
                const value = $(`select[name="${field.name}"], input[name="${field.name}"]`).val();
                if (!value || value === '' || (field.disallowZero && value === '0')) {
                    showNotification(`Please select a ${field.label}.`, 'error');
                    return false;
                }
            }


            return true;
        }

        // Enhanced notification system with better styling
        function showNotification(message, type = 'info', duration = 3000) {
            // Remove existing notifications first
            $('.notification-toast').remove();

            const alertClass = {
                'success': 'alert-success',
                'error': 'alert-danger',
                'warning': 'alert-warning',
                'info': 'alert-info'
            }[type] || 'alert-info';

            const icon = {
                'success': 'fas fa-check-circle',
                'error': 'fas fa-exclamation-circle',
                'warning': 'fas fa-exclamation-triangle',
                'info': 'fas fa-info-circle'
            }[type] || 'fas fa-info-circle';

            const notification = `
                <div class="alert ${alertClass} alert-dismissible fade show notification-toast" role="alert"
                     style="position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px; max-width: 400px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); animation: slideInRight 0.3s ease-out;">
                    <i class="${icon} me-2"></i>${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`;

            $('body').append(notification);

            // Auto remove after specified duration
            setTimeout(function() {
                $('.notification-toast').fadeOut(500, function() {
                    $(this).remove();
                });
            }, duration);
        }

        // Helper function to properly close modals
        function closeModal(modalId) {
            const modalElement = document.getElementById(modalId);
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
            }

            // Force cleanup after animation
            setTimeout(function() {
                $('.modal-backdrop').remove();
                $('body').removeClass('modal-open').css('padding-right', '');
            }, 300);
        }


         function confirmPayment(invoiceId) {
        // Tạo modal xác nhận tùy chỉnh với Bootstrap
        const confirmModal = `
            <div class="modal fade" id="confirmPaymentModal" tabindex="-1" role="dialog" aria-labelledby="confirmPaymentModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header bg-warning text-dark">
                            <h5 class="modal-title" id="confirmPaymentModalLabel">
                                <i class="fas fa-check-circle me-2"></i>Confirm Payment
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="d-flex align-items-center mb-3">
                                <i class="fas fa-exclamation-triangle text-warning fa-2x me-3"></i>
                                <div>
                                    <h6 class="mb-1">Confirm Payment for Invoice #${invoiceId}</h6>
                                    <p class="mb-0 text-muted">Are you sure you want to confirm payment for this invoice? This action cannot be undone.</p>
                                </div>
                            </div>
                            <div class="alert alert-info" role="alert">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Note:</strong> Once confirmed, the payment status will be updated and the invoice will be marked as paid.
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                <i class="fas fa-times me-2"></i>Cancel
                            </button>
                            <button type="button" class="btn btn-warning" onclick="submitConfirmPayment()">
                                <i class="fas fa-check me-2"></i>Yes, Confirm Payment
                            </button>
                        </div>
                    </div>
                </div>
            </div>`;

        // Xóa modal cũ nếu có
        $('#confirmPaymentModal').remove();

        // Thêm modal vào body
        $('body').append(confirmModal);

        // Hiển thị modal
        const modal = new bootstrap.Modal(document.getElementById('confirmPaymentModal'));
        modal.show();

        // Cleanup khi modal đóng
        $('#confirmPaymentModal').on('hidden.bs.modal', function () {
            $(this).remove();
        });
    }

    function submitConfirmPayment() {
        // Hiển thị loading state
        const confirmButton = $('#confirmPaymentModal .btn-warning');
        const originalText = confirmButton.html();
        confirmButton.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Processing...');

        // Submit form
        try {
            $('#confirmPaymentForm').submit();
        } catch (error) {
            console.error('Error submitting confirm payment:', error);
            showNotification('An error occurred while confirming payment. Please try again.', 'error');

            // Restore button state
            confirmButton.prop('disabled', false).html(originalText);
        }
    }

    // Alternative: Sử dụng SweetAlert2 nếu bạn muốn giao diện đẹp hơn
    function confirmPaymentWithSweetAlert(invoiceId) {
        // Thêm CDN SweetAlert2 vào head nếu chưa có:

    Swal.fire({
    title: 'Confirm Payment',
    html: `
    <div class="text-start">
        <p><strong>Invoice #${invoiceId}</strong></p>
        <p>Are you sure you want to confirm payment for this invoice?</p>
        <div class="alert alert-warning mt-3" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            This action cannot be undone!
        </div>
    </div>
    `,
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#ffc107',
    cancelButtonColor: '#6c757d',
    confirmButtonText: '<i class="fas fa-check me-2"></i>Yes, Confirm Payment',
    cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel',
    reverseButtons: true,
    focusCancel: true
    }).then((result) => {
    if (result.isConfirmed) {
    // Hiển thị loading
    Swal.fire({
    title: 'Processing...',
    text: 'Please wait while we confirm the payment.',
    allowOutsideClick: false,
    allowEscapeKey: false,
    didOpen: () => {
    Swal.showLoading();
    }
    });

    // Submit form
    $('#confirmPaymentForm').submit();
    }
    });
}

    // Thêm validation trước khi confirm payment
    function validateBeforeConfirmPayment(invoiceId) {
        // Kiểm tra xem có items không
        const itemCount = $('#item-list tr').length;
        if (itemCount === 0) {
            showNotification('Cannot confirm payment: Invoice has no items. Please add items first.', 'error');
            return false;
        }

        // Kiểm tra total amount
        const totalAmount = parseFloat($('#total-amount').text() || '0');
        if (totalAmount <= 0) {
            showNotification('Cannot confirm payment: Total amount must be greater than 0.', 'error');
            return false;
        }

        // Kiểm tra các trường bắt buộc
        const paymentType = $('select[name="Payment_Type"]').val();
        const invoiceType = $('select[name="Invoice_Type"]').val();

        if (!paymentType || paymentType === '' || paymentType === '0') {
            showNotification('Please select Payment Type before confirming payment.', 'error');
            return false;
        }

        if (!invoiceType || invoiceType === '' || invoiceType === '0') {
            showNotification('Please select Invoice Type before confirming payment.', 'error');
            return false;
        }

        // Nếu validation pass, hiển thị confirm dialog
        confirmPayment(invoiceId);
        return true;
    }
    </script>
}
<style>
    @@keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .table tr.removing {
        background-color: #f8d7da;
        transition: all 0.3s ease;
    }

    .btn:disabled {
        cursor: not-allowed;
    }

    .notification-toast {
        animation: slideInRight 0.3s ease-out;
    }
</style>